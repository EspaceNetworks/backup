#!/usr/bin/env php
<?php
// retrieve_backup_cron_from_sqlite3.php Ethan Schroeder 2008

// this program is in charge of looking into the database and creating crontab jobs for each of the Backup Sets
// The crontab file is for user asterisk.
//
// The program preserves any other cron jobs (Not part of the backup) that are installed for the user asterisk 
//

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
$table_name = "Backup";
// the path to the extensions.conf file
// WARNING: this file will be substituted by the output of this program

/********************************* END OF CONFIGURATION *******************************/
if (! function_exists("_")) {
	function _($str) {
		return $str;
	}
}

ini_set('error_reporting', E_ALL & ~E_NOTICE);

define("AMP_CONF", "/etc/amportal.conf");
$amportalconf = AMP_CONF;

//define("ASTERISK_CONF", "/etc/asterisk/asterisk.conf");
define("WARNING_BANNER", "; "._("do not edit this file, this is an auto-generated file by freepbx\n")."; "._("all modifications must be done from the web gui")."\n\n\n");

// Emulate gettext extension functions if gettext is not available
if (!function_exists('_')) {
	function _($str) {
		return $str;
	}
}

function out($text) {
	echo $text."\n";
}

function outn($text) {
	echo $text;
}

function error($text) {
	echo "[ERROR] ".$text."\n";
}

function fatal($text, $extended_text="", $type="FATAL") {
	global $db;

	echo "[$type] ".$text." ".$extended_text."\n";

	if(!DB::isError($db)) {
		$nt = notifications::create($db);
		$nt->add_critical('retrieve_conf', $type, $text, $extended_text);
	}

	exit(1);
}

function debug($text) {
	global $debug;
	
	if ($debug) echo "[DEBUG-preDB] ".$text."\n";
}

// bootstrap retrieve_conf by getting the AMPWEBROOT since that is currently where the necessary
// functions.inc.php resides, and then use that parser to properly parse the file and get all
// the defaults as needed.
//
function parse_amportal_conf_bootstrap($filename) {
	$file = file($filename);
	foreach ($file as $line) {
		if (preg_match("/^\s*([\w]+)\s*=\s*\"?([\w\/\:\.\*\%-]*)\"?\s*([;#].*)?/",$line,$matches)) {
			$conf[ $matches[1] ] = $matches[2];
		}
	}
	if ( !isset($conf["AMPWEBROOT"]) || ($conf["AMPWEBROOT"] == "")) {
		$conf["AMPWEBROOT"] = "/var/www/html";
	} else {
		$conf["AMPWEBROOT"] = rtrim($conf["AMPWEBROOT"],'/');
	}

	return $conf;
}

/** Adds a trailing slash to a directory, if it doesn't already have one
 */
function addslash($dir) {
	return (($dir[ strlen($dir)-1 ] == '/') ? $dir : $dir.'/');
}

// **** Make sure we have PEAR's DB.php, and include it

outn(_("Checking for PEAR DB.."));
if (! @ include('DB.php')) {
	out(_("FAILED"));
	fatal(_("PEAR Missing"),sprintf(_("PEAR must be installed (requires DB.php). Include path: %s "), ini_get("include_path")));
}
out(_("OK"));

// **** Check for amportal.conf

outn(sprintf(_("Checking for %s "), $amportalconf)._(".."));
if (!file_exists($amportalconf)) {
	fatal(_("amportal.conf access problem: "),sprintf(_("The %s file does not exist, or is inaccessible"), $amportalconf));
}
out(_("OK"));

// **** read amportal.conf

outn(sprintf(_("Bootstrapping %s .."), $amportalconf));
$amp_conf = parse_amportal_conf_bootstrap($amportalconf);
if (count($amp_conf) == 0) {
	fatal(_("amportal.conf parsing failure"),sprintf(_("no entries found in %s"), $amportalconf));
}
out(_("OK"));

outn(sprintf(_("Parsing %s .."), $amportalconf));
require_once($amp_conf['AMPWEBROOT']."/admin/functions.inc.php");
$amp_conf = parse_amportal_conf($amportalconf);
if (count($amp_conf) == 0) {
	fatal(_("amportal.conf parsing failure"),sprintf(_("no entries found in %s"), $amportalconf));
}
out(_("OK"));

$Backup_cron = $amp_conf["ASTETCDIR"]."/backup.conf";

// **** Connect to database

outn(_("Connecting to database.."));

# the engine to be used for the SQL queries,
# if none supplied, backfall to mysql
$db_engine = "mysql";
if (isset($amp_conf["AMPDBENGINE"])){
	$db_engine = $amp_conf["AMPDBENGINE"];
}

switch ($db_engine)
{
	case "pgsql":
	case "mysql":
		/* datasource in in this style:
		dbengine://username:password@host/database */
	
		$db_user = $amp_conf["AMPDBUSER"];
		$db_pass = $amp_conf["AMPDBPASS"];
		$db_host = $amp_conf["AMPDBHOST"];
		$db_name = $amp_conf["AMPDBNAME"];
	
		$datasource = $db_engine.'://'.$db_user.':'.$db_pass.'@'.$db_host.'/'.$db_name;
		$db = DB::connect($datasource); // attempt connection
		break;
	
	case "sqlite":
		die_freepbx("SQLite2 support is deprecated. Please use sqlite3 only.");
		break;
	
	case "sqlite3":
		if (!isset($amp_conf["AMPDBFILE"]))
			fatal("You must setup properly AMPDBFILE in $amportalconf");
			
		if (isset($amp_conf["AMPDBFILE"]) == "")
			fatal("AMPDBFILE in $amportalconf cannot be blank");

		/* on centos this extension is not loaded by default */
		if (! extension_loaded('sqlite3.so')  && ! extension_loaded('SQLITE3'))
			dl('sqlite3.so');

		if (! @require_once('DB/sqlite3.php') )
		{
			die_freepbx("Your PHP installation has no PEAR/SQLite3 support. Please install php-sqlite3 and php-pear.");
		}

		require_once('DB/sqlite3.php');
		$datasource = "sqlite3:///" . $amp_conf["AMPDBFILE"] . "?mode=0666";
		$db = DB::connect($datasource);
		break;

	default:
		fatal( "Unknown SQL engine: [$db_engine]");
}

if(DB::isError($db)) {
	out(_("FAILED"));
	debug($db->userinfo);
	fatal(_("database connection failure"),("failed trying to connect to the configured database"));
	
}
out(_("OK"));

outn("Attempting to open $Backup_cron for reading and writing...");
if(!$handle = fopen("$Backup_cron", "r+"))  {
	exit("Cannot create or overwrite cron file: $Backup_cron");
}
out(_("OK"));

$statement = "SELECT Command, ID from $table_name WHERE Method NOT LIKE 'now%'";
$results = $db->getAll($statement, DB_FETCHMODE_ASSOC);

outn("Checking for configured backup schedules...");
if(sizeof($results) == 0)  {
	print "No Backup Schedules defined in $table_name\n";
	//grab any other cronjobs that are running as asterisk and NOT associated with backups
	system ("/usr/bin/crontab -l | grep -v ^#\ | grep -v ampbackup.pl  >> $Backup_cron ");
	//issue the schedule to the cron scheduler
	system ("/usr/bin/crontab $Backup_cron");
	exit;
}
out(_("OK"));

outn("Writing out $Backup_cron ...");
foreach ($results as $result) {
	$Backup_Command = $result['Command'];
	$Backup_ID = $result['ID'];
	fwrite($handle,"$Backup_Command $Backup_ID\n");
	fclose($handle);
}
out(_("OK"));

outn("Executing crontab...");
//grab any other cronjobs that are running as asterisk and NOT associated with backups
system ("/usr/bin/crontab -l | grep -v '^# DO NOT' | grep -v ^'# ('  |  grep -v ampbackup.pl  >> $Backup_cron ");
//issue the schedule to the cron scheduler
system ("/usr/bin/crontab $Backup_cron");
out(_("OK"));

?>
